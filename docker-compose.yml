version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: contractguard-db
    environment:
      POSTGRES_DB: contractguard
      POSTGRES_USER: contractguard
      POSTGRES_PASSWORD: contractguard_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/01_schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contractguard -d contractguard"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - contractguard-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: contractguard-api
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://contractguard:contractguard_password@database:5432/contractguard
      JWT_SECRET: development-jwt-secret-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: gpt-4o-mini
      CORS_ORIGIN: http://localhost:3000
      ENABLE_REQUEST_LOGGING: "true"
      LOG_LEVEL: debug
    ports:
      - "5000:5000"
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - contractguard-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: contractguard-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_APP_NAME: ContractGuard
      REACT_APP_VERSION: 1.0.0
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
    depends_on:
      - backend
    networks:
      - contractguard-network
    restart: unless-stopped

  # Redis Cache (optional - for future use)
  redis:
    image: redis:7-alpine
    container_name: contractguard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - contractguard-network
    restart: unless-stopped
    profiles:
      - cache

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  contractguard-network:
    driver: bridge